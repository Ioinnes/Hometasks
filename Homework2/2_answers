1) std::pair и std::tuple удобны, когда нам нужно хранить разнородные элементы в одном месте. Так же их удобно использовать для того, чтобы функция возвращала несколько значений
2) std::array предпочительней использовать тогда, когда нам необходимо работать с массивом фиксированной длины, хранящий в себе данные одного типа. 
3) std::vector удобен тогда, когда нам нужно работать с динамически изменяющимся массивом данных. удобство заключается в том, что из-за устройства std::vector нам не нужно думать о выделении памяти самостоятельно 
4) 1. у std::deque меньше overhead. Вектор растет сразу в два раза, а дека - фиксированными страницами. 2. у std::deque отстуствует копирование старого содержимого на новое место при расширении контейнера.
5) у std::list вставка и удаление элемента в середине листа происходит быстрее, чем, к примеру, у вектора, что при некоторых обстоятельствах может являться большим преимуществом
6) По сравнению с std::list этот контейнер обеспечивает более эффективное хранение, когда двунаправленная итерация не требуется.
7) Адаптеры — это специальные предопределенные контейнерные классы, которые адаптированы для выполнения конкретных заданий. Это stack, queue, priority_queue
8) boost::circular_buffer хранит данные последовательно (так же, как и вектор), а это значит, что cache miss будет происходить реже. так же он удобен при некоторой цикличности записи данных, когда старые данные нам в какой-то момент перестают быть нужными. Еще один 
9)  
10) 1. массив массивов. 2. вектор векторов. 3. динамический массив массивов (размер встроенного массива должен быть известен на стадии компиляции) 4. boost::multi_array 

