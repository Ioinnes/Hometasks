1. 
Заголовок random разделяет генерацию псевдослучайных чисел на 3 части и предоставляет три инструмента:

    класс std::random_device, который запрашивает у операционной системы почти случайное целое число; этот класс более удачные зёрна, чем если брать текущее время
    класс std::mt19937 и другие классы псевдо-случайных генераторов, задача которых - размножить одно зерно в целую последовательность чисел
    класс std::uniform_int_distribution и другие классы распределений

2. 
Основное отличие функции от функтора заключается в том, что функция не имеет состояния, а функтор, являющийся объектом, обладать состоянием может.
Лямбда-выражения в C++ — это краткая форма записи анонимных функторов.
3.
виды итераторов 

    входной
    выходной
    прямой
    двунаправленный
    произвольного доступа

InputIterator (входной)

    Копирование, присваивание.
    Операции сравнения на равенство == и !=.
    Инкремент: ++iter и iter++.
    Разыменование для чтения: *iter и iter->m, при этом запрещена запись: *iter = value;.

Пример входного итератора - это итератор чтения из потока: std::istream_iterator.
OutputIterator (выходной)

    Копирование, присваивание.
    Инкремент: ++iter и iter++.
    Разыменование для записи: *iter = value и *iter++ = value, при этом запрещено чтение.

Пример выходного итератора - это итератор записи в поток: std::ostream_iterator.
ForwardIterator (прямой)

    Все операции InputIterator и OutputIterator.
    Требование многопроходности: если i1 == i2, то ++i1 == ++i2, т.е. итератор можно копировать, и обходить им последовательность много раз.

Прямые итераторы - это итераторы односвязных списков, например std::forward_list.
BidirectionalIterator (двусторонний)

    Все операции ForwardIterator.
    Декремент: --iter, iter--, *iter--.

Пример: итераторы двусвязных списков (std::list), деревьев (std::set).
RandomAccessIterator (произвольного доступа)

    Все операции BidirectionalIterator.
    Операции сравнения: i1 < i2, i1 > i2, i1 <= i2, i1 >= i2.
    Сложение/вычитание с числом: iter + n, iter += n, iter - n, iter -= n.
    Разность итераторов: i2 - i1.
    Индексирование: iter[n].

Пример: итераторы массивов (std::vector), указатели.

4.
  Инспекторы — используются для просмотра (без изменений) данных в контейнере (например, операции поиска или подсчета элементов).

  Мутаторы — используются для изменения данных в контейнере (например, операции сортировки или перестановки элементов).

   Фасилитаторы — используются для генерации результата на основе значений элементов данных (например, объекты, которые умножают значения, либо объекты, которые определяют, в каком порядке пары элементов должны быть отсортированы).
   
5.
При написании собственных алгоритмов сортировки легко допустить ошибку 
